import java.io.*; 
import java.util.*; 
import java.lang.*;
class TreeNode {
    int val;
    TreeNode left;
    TreeNode right;
    TreeNode(int x) { val = x; }
}

class Codec {
	public String serializeInteger(int x) {
		String result ="";
		result = (char)(x&255) + result;
		x >>>=8;
		result = (char)(x&255) + result;
		x >>>=8;
		result = (char)(x&255) + result;
		x >>>=8;
		result = (char)(x&255) + result;
		x >>>=8;
		return result;
		
	}
	public int deserializeInteger(String s) {
		int x = 0;
		for (int i=0; i<s.length(); i++) {
			x <<= 8;
			x += (int)s.charAt(i);
		}
		return x;
	}
    // Encodes a tree to a single string.
    public String serialize(TreeNode root) {
        String result = "";
        if (root ==null){return result;}
        Stack<TreeNode> stack = new Stack<>();
        stack.push(root);
        while (!stack.isEmpty()) {
        	TreeNode x = stack.pop();
        	result = result + serializeInteger(x.val);
        	if (x.right!=null) {stack.push(x.right);}
        	if (x.left!=null) {stack.push(x.left);}
        }
        return result;
    }

    // Decodes your encoded data to tree.
    public TreeNode deserialize(String data) {
        if (data.length() == 0) {return null;}
    	//TreeNode root = new TreeNode (deserializeInteger(data.substring(0,4)));
    	
    	int [] arr = new int[data.length() / 4];
    	int [] arr2 = new int[data.length() / 4];
    	HashMap<Integer, Integer> map = new HashMap<>();
    	for (int i = 0; i<data.length(); i+=4) {
    		arr[i / 4] = deserializeInteger(data.substring(i, i+4));
    		arr2[i/ 4] = arr[i/4];
    		map.put(arr[i/4], i/4);
    	}
    	Arrays.sort(arr2);
    	
    	return buildTree(arr, 0, arr.length - 1, map, arr2);
    }
    public TreeNode buildTree(int[]arr, int start, int end, HashMap<Integer, Integer>map, int[]arr2) {
    	if (start == end) {
    		return new TreeNode(arr[start]);
    	}
    	if (start > end) {return null;}
    	TreeNode root = new TreeNode(arr[start]);
    	int i = start;
    	int j = Arrays.binarySearch(arr2, arr[start]);
    	if (j+1 < arr.length) {i = map.get(arr[j+1]); }
    	else {i = end + 1;}
    	
    	root.left = buildTree(arr, start + 1, i - 1, map, arr2);
    	root.right= buildTree(arr, i , end, map, arr2);
    	return root;
    }
}

public class Solution {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		//System.out.print("aaa");
		System.out.println(Math.log(2.7));
		Codec c = new Codec();
		System.out.println(c.deserializeInteger(c.serializeInteger(-2341231)));
		System.out.println(c.serialize(c.deserialize("aaaabbbbccccddddeeeeffff")));
	}

}
