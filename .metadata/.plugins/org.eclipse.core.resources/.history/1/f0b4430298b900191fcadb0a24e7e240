import java.io.*; 
import java.util.*; 
import java.lang.*;

class SORTING implements Comparator<int[]> { 
    // Used for sorting in ascending order of 
    // roll name 
    public int compare(int[] a, int[] b) { 
        if (a[0]!=b[0]) {return a[0]-b[0];}
    	return a[1]-b[1]; 
    } 
} 


public class Solution {
	public boolean connect(int[]a, int[]b) {
		if (b[0]<=a[1]) {return true;}
		
		return false;
		
	}
	public int[] littlemerge(int [] a, int [] b) {
		int [] c=new int[2];
		c[0]=Math.min(a[0], b[0]);
		c[1]=Math.max(a[1], b[1]);
		return c;
	}
	
	
	
	public int[][] merge(int[][] intervals) {
        ArrayList<int[]> list=new ArrayList<>();
		
		for (int[]coord: intervals) {
        	list.add(coord);
        }
        
        Collections.sort(list, new SORTING());
        
        Queue<int []> queue=new LinkedList<>();
        
        int[] temp=null;
        int[] obtain;
        int index=0;
        
        while ( index<list.size() ) {
        	obtain=list.get(index);
        	if(temp==null) {
        		
        		temp=obtain;
        	}
        	else if (connect(temp,obtain)) {
        		temp=littlemerge(temp,obtain);
        	}
        	else {
        		queue.offer(temp);
        		temp=obtain;
        		
        	}
        	        	
        	index++;
        }
        queue.offer(temp);
        
        int N=queue.size();
        int [][] ans=new int[N][2];
        for (int i=0; i<N ; i++) {
        	temp=queue.poll();
        	ans[i][0]=temp[0];
        	ans[i][1]=temp[1];
        }
        
        
        
        return ans;
    }
	
	
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		int[][]interval= {{1,3},{5,7},{2,4}};
		Solution s=new Solution();
		s.merge(interval);
		
		
		List<int[]> list=new ArrayList<>();
		int[]x={1,2};
		list.add(x);
		int[]y={4,9};
		list.add(y);
		int[]z={2,5};
		list.add(z);
		int[]u={2,7};
		list.add(u);
		
		System.out.println(list);
		Collections.sort(list, new SORTING()); 
		PriorityQueue<int[]> pQueue = 
                new PriorityQueue<>(5,new SORTING());
		System.out.println(list);
		
		
		PriorityQueue<Integer> pq = 
                new PriorityQueue<>();
		
		pq.add(1);
		pq.add(2);
		System.out.println(pq.size());
		pq.poll();
		System.out.println(pq.size());
		
		
		
		
		
		
	}

}
