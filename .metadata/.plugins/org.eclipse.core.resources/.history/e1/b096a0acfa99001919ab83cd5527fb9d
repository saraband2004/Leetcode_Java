import java.util.*; 

class cood{
	int x;
	int y;
	public cood(int y1, int x1) {
		y=y1;
		x=x1;
	}
}

public class Solution {
	
	public static boolean stillIN(char[][] grid, int y, int x) {
		if (y < grid.length && y>=0) {
			if (x < grid[0].length && x>=0) {
				return true;
				
			}
			
		}
		return false;
	}
	
	public static int  numIslands(char[][] grid) {
		int x=0;
		int y=0;
		int count=0;
		cood pop;
		Queue<cood> qiu=new LinkedList<>();
				
		while(y < grid.length) {
			x=0;
			while (x < grid[0].length) {
				
				if (grid[y][x]=='1') {
					count++;
					
					qiu.offer(new cood(y,x));
					
					while( !qiu.isEmpty() ) {
						pop=qiu.poll();
						// exhaust neighbors
						if ( stillIN(grid, pop.y + 1, pop.x )) {
							if (grid[pop.y + 1][pop.x] == '1') {
								qiu.offer(new cood(pop.y + 1, pop.x))								
							}
						}
						if ( stillIN(grid, pop.y , pop.x + 1)) {
							if (grid[pop.y ][pop.x + 1] == '1') {
								qiu.offer(new cood(pop.y , pop.x+1))								
							}
						}
						if ( stillIN(grid, pop.y - 1, pop.x )) {
							if (grid[pop.y - 1][pop.x] == '1') {
								qiu.offer(new cood(pop.y - 1, pop.x))								
							}
						}
						if ( stillIN(grid, pop.y,pop.x-1 )) {
							if (grid[pop.y][pop.x-1] == '1') {
								qiu.offer(new cood(pop.y, pop.x-1))								
							}
						}
						
						
					}
					
					
					
					//do crazy things
					
					
					
					
				}
				x++;
				if (x == grid[0].length) {
					y++;
				}
				
			}
			
			
		}
		
		
		
		return count;	
    }
	
	public static void main(String[] args) {
		// TODO Auto-generated method stub
			char [][] grid = {{'1','0','0'},{'1','0','1'},{'1','0','1'},{'1','1','1'}};
			System.out.print(grid[0].length);
			System.out.print(numIslands(grid));
	}

}
