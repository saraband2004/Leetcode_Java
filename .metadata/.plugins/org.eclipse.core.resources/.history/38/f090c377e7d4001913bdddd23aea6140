import java.io.*; 
import java.util.*; 
import java.lang.*;


public class Solution {
    public int findUnsortedSubarray(int[] nums) {
        Stack<Integer> stack = new Stack<>();
        
        int i = 0;
        
        while(i < nums.length){
            if (stack.isEmpty()){
                stack.push(i);
                i++;
            }
            else if (nums[i] >= nums[stack.peek()]){
                stack.push(i);
                i++;
            }
            else {
                stack.pop();
            }
        }
        
        //System.out.println(stack.size());
        
        int [] container = new int[stack.size()];
        if (stack.size()==nums.length){
            return 0;}
        for (int j = stack.size()-1; j>= 0; j--){
            container [j] = stack.pop();
        }
        
        int left = 0;
        while(left < container.length && container[left] == left){
            left++;
        }
        
        
        
        while(!stack.isEmpty()) {
        	stack.pop();
        }
        
        
        i = nums.length - 1;
        
        while(i >= 0){
            if (stack.isEmpty()){
                stack.push(i);
                i--;
            }
            else if (nums[i] <= nums[stack.peek()]){
                stack.push(i);
                i--;
            }
            else {
                stack.pop();
            }
        }
        
        int [] cont = new int [stack.size()];
        for (int j = 0; j< cont.length ;  j++) {
        	cont[j] = stack.pop();
        }
        
        int j = nums.length - 1;
        int h = cont.length - 1;
        while (cont[h] == j) {
        	h -- ;
        	j -- ;
        }
        
        return 
        		 j - left+1;
    }
	
	
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		int[]nums = {1,2,3,4,5};
		System.out.println(new Solution().findUnsortedSubarray(nums));
		
	}   
 

}
