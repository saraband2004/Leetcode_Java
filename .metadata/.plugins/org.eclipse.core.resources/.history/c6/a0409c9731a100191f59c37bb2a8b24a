import java.io.*; 
import java.util.*; 
import java.lang.*;


public class Solution {
	public static int globalcount;
	public static void blankmatrix (boolean [][] x) {
		int i=0;
		int j=0;
		while(i< x.length) {
			j=0;
			while(j<x[0].length) {
				x[i][j]=false;
				j++;
			}
			i++;
		}
	}
	public static List<int[]> markmatrix(boolean[][]x, int firstposition, int secondposition ) {
		int i=0;
		int j=0;
		int []u;
		List<int[]> changed=new ArrayList<>();
		while(i< x.length) {
			j=0;
			while(j<x[0].length) {
				//x[i][j]=false;
				if (i == firstposition || j == secondposition) {
					if (x[i][j]==false) {
						u= new int [2];
						u[0]=i;
						u[1]=j;
						changed.add(u);
					}
					
					x[i][j]=true;}
				if (i+j == firstposition+secondposition || i-j == firstposition-secondposition) {
					if (x[i][j]==false) {
						u= new int [2];
						u[0]=i;
						u[1]=j;
						changed.add(u);
					}
					
					x[i][j]=true;}
				j++;
			}
			i++;
		}
		u= new int [2];
		u[0]=firstposition;
		u[1]=secondposition;
		changed.add(u);
		return changed;
	}
	public static void changeback(boolean [][] status, List<int[]> changed) {
		
		for (int[]x: changed) {
			status[x[0]][x[1]]=false;
			
		}
		
		
	}
	
	public static List<List<String>> solveNQueens(int n) {
        // write your code here
		List<List<String>> result=new ArrayList<>();
		
		boolean [][] status=new boolean[n][n]; blankmatrix(status);
		boolean [][] queenposition=new boolean[n][n]; blankmatrix(status);
		
		int resultcount=0;
		int queennumber=0;
		int firstpositionnext=0;
		int secondpositionnext=0;
		
		//x=5;	//System.out.println(x);
		
		
		return result;
    }
	public static void solveNQueensII(int n, int first, boolean [][] queenposition, boolean [][] status, List<List<String>> result) {
        // write your code here
		int second =0;
		List<int[]> changed;
		boolean test=true;
		if (first == n) {
			globalcount++;
		}
		while(second < n) {
			if (status[first][second]== false ) {
				test=false;
				
				queenposition[first][second]=true;
				
				changed=markmatrix(status, first, second);
				
				solveNQueensII(n,first+1,queenposition,status,result);				
				
				queenposition[first][second]=false;
				
				changeback(status, changed); 
				
			}
			second++;
		}
		if (test) {
			return;
		}
		
    }
	

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		solveNQueens(3);
		
		ArrayList<int[]> u=new ArrayList<>();
		int[]x0= {1,2};
		int[]x1= {1,2};
		u.add(x1);
		u.add(x0);
		//u.add({1,2});
		System.out.print(x0==x1);
		
		//int[]x0=new int[2];
		int a=2;
		x0=new int[2];
		//int a=3;
		
		globalcount=0;
		
	}

}
